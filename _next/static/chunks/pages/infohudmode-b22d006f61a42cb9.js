(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[87],{4215:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/infohudmode",function(){return a(8037)}])},2469:function(e,t,a){"use strict";a.d(t,{Z:function(){return h}});var o=a(5893),n=a(9008),r=a(1664),i=a(1163);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var s=[{name:"Patch",href:"/"},{name:"Help",href:"/help"},{name:"Infohud Modes",href:"/infohudmode"},{name:"Changelog",href:"/changelog"}],u=function(e){var t=e.href,a=e.name,n="hover:text-indigo-600 text-gray-700";return(0,i.useRouter)().asPath===t&&(n="".concat(n," underline underline-offset-4")),(0,o.jsx)(r.default,{href:t,children:(0,o.jsx)("a",{className:n,children:a})})};function h(e){var t=e.children;return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.default,{children:[(0,o.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"}),(0,o.jsx)("title",{children:"Super Metroid Practice Hack"})]}),(0,o.jsxs)("div",{className:"min-h-screen bg-gray-100",children:[(0,o.jsx)("nav",{className:"bg-gray-200",children:(0,o.jsx)("div",{children:(0,o.jsx)("div",{className:"flex justify-around h-16 px-20 shadow items-center",children:(0,o.jsxs)("div",{className:"flex items-center space-x-16",children:[(0,o.jsx)("h1",{className:"text-xl lg:text-2xl font-bold",children:(0,o.jsx)(r.default,{href:"/",children:(0,o.jsx)("a",{className:"text-black hover:text-indigo-600",children:"Super Metroid Practice Hack"})})}),(0,o.jsx)("div",{className:"flex justify-around space-x-4",children:s.map((function(e){return(0,o.jsx)(u,function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},o=Object.keys(a);"function"===typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),o.forEach((function(t){l(e,t,a[t])}))}return e}({},e),e.href)}))})]})})})}),(0,o.jsx)("div",{className:"container mx-auto",children:(0,o.jsx)("div",{className:"flex flex-wrap justify-center",children:t})})]})]})}},9587:function(e,t,a){"use strict";a.d(t,{Z:function(){return s}});var o=a(5893),n=a(3905);a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},o=Object.keys(a);"function"===typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),o.forEach((function(t){r(e,t,a[t])}))}return e}var l={h1:function(e){return(0,o.jsx)("div",{className:"p-4 mb-4 mt-8 bg-blue-100 text-blue-500 rounded shadow-sm font-sans font-bold",children:e.children})},h2:function(e){return(0,o.jsx)("h2",i({className:"mx-2 text-lg font-bold mt-4"},e))},p:function(e){return(0,o.jsx)("p",i({className:"mx-4"},e))},ol:function(e){return(0,o.jsx)("ol",i({className:"list-decimal ml-8 text-md"},e))},ul:function(e){return(0,o.jsx)("ul",i({className:"list-disc ml-8 mb-4 text-md"},e))},table:function(e){return(0,o.jsx)("table",i({className:"table-auto"},e))},th:function(e){return(0,o.jsx)("th",i({className:"px-4"},e))},td:function(e){return(0,o.jsx)("td",i({className:"px-4"},e))},img:function(e){return(0,o.jsx)("img",i({className:"mx-auto mb-4"},e))}};function s(e){var t=e.MarkdownComponent;return(0,o.jsx)("div",{className:"px-8 h-auto mt-10 w-10/12 bg-white rounded font-sans shadow-sm",children:(0,o.jsx)(n.Zo,{components:l,children:(0,o.jsx)(t,{})})})}},8037:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return h}});var o=a(5893),n=a(2469),r=a(9587),i=(a(7294),a(3905));function l(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s={};function u(e){var t=e.components,a=l(e,["components"]);return(0,i.kt)("wrapper",Object.assign({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",null,"Presentation"),(0,i.kt)("h2",null,"Negative Numbers"),(0,i.kt)("p",null,"Infohud displays negative numbers as large positive numbers; this is sometimes referred to as number underflow.\nFor example, at the start of moonfall when vertical speed underflows to a number between 0 and -1,\nthe whole number portion of vertical speed will be presented as 65535. -2 is displayed as 65534, -3 is displayed as 65533,\nand so on.    "),(0,i.kt)("h2",null,"Hexadecimal"),(0,i.kt)("p",null,"Some numbers like subpixels represent fractions. For example, the max walking speed is 2.75 pixels per frame.\nHowever the fractional speed is not stored in a readable form like 0.75.\nInstead it is stored as 49152, since 49152/65536 = 0.75.\nThe best way to efficiently display this information is to use hexadecimal or base-16 numbering format.\nIn this example, the fractional speed converts from 49152 to C000 (hexadecimal uses 0-9 and A-F as the 16 digits)."),(0,i.kt)("h2",null,"Samus HP"),(0,i.kt)("p",null,"Most infohud and room strat options fit in the bottom left of the infohud, but some options will also cover up Samus HP.\nThis will be noted in the descriptions below. Shine Tune also covers up the right side of the infohud including the segment timer\nand door transition frames."),(0,i.kt)("h1",null,"Infohud Mode features"),(0,i.kt)("h2",null,"Enemy HP"),(0,i.kt)("p",null,"Displays the HP of the first enemy. Most useful for boss fights, although Mother Brain uses the second enemy slot. For Mother Brain HP, you can select Room Strat, and then for the Room Strat select MB HP."),(0,i.kt)("h2",null,"Room Strat"),(0,i.kt)("p",null,"Allows you to select a Room Strat instead of an Infohud Mode. See below section for the various Room Strats."),(0,i.kt)("h2",null,"Charge"),(0,i.kt)("p",null,"Counts down the frames from the time you press shot until the time the beam would be charged, after which it will count up the number of extra frames applied towards charging the beam. The timer resets if you let go of the shot button, and begins counting up the frames shot was released to the left of the charge timer."),(0,i.kt)("h2",null,"X Factor"),(0,i.kt)("p",null,"Counts down the frames from the time you press shoot until the time the SBA (Special Beam Attack) would activate. The timer resets if you let go of the shoot button or if the SBA activates."),(0,i.kt)("h2",null,"Cooldown"),(0,i.kt)("p",null,"Counts down the frames from time you activate a weapon or lay a bomb until the time you can fire again."),(0,i.kt)("h2",null,"Shinespark"),(0,i.kt)("p",null,"Counts down the frames from the time you charge a shinespark until the time the charge runs out, after which it will count up the number of frames you were late to the left of the shinespark timer. If you activate the shinespark in time, it will display the number of frames that were remaining, with 1 indicating there were no frames to spare."),(0,i.kt)("h2",null,"Dash"),(0,i.kt)("p",null,"Displays the speed boost counter. This number can be between 0 and 4. When building a shinespark charge, each successful tap (or held dash button) will increment the dash counter."),(0,i.kt)("h2",null,"Shine Tune"),(0,i.kt)("p",null,"Displays the number of extra frames that dash was held while building a shinespark. There can be up to eight numbers.",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","For example, consider the following 3-tap short charge: ",(0,i.kt)("em",{parentName:"p"},"9 2 10 0 ... 814 14 7")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first tap was a little early, with dash held 9 frames early and 2 frames late for a total of 12 frames (counting the magic frame). "),(0,i.kt)("li",{parentName:"ul"},"The second tap was almost too early, with dash held 10 frames early and 0 frames late. "),(0,i.kt)("li",{parentName:"ul"},"The third tap was pressed 8 frames early and held. We can see it was held because the next two numbers are the same and are 14 or larger. This indicates that the the third tap was held 14 frames late and the fourth tap was held 14 frames early, which really means the dash button was held.  ")),(0,i.kt)("p",null,"The last number is the frames it took to complete the charge by pressing down or for the charge to be cancelled. The first and last numbers can be rather large; in fact the first number will be displayed as XX if it is larger than 99. If you miss a tap then you will get early or late feedback on that. In this example if the second tap were one frame sooner then you would see:\n9 2 11E1 ...\nThis indicates the second tap started 11 frames early and ended 1 frame too early.\nFor reference, on NTSC the magic frames are 25 frames apart between first and second tap, 20 frames apart between second and third tap, and 15 frames apart between third and fourth tap.\nOn PAL the magic frames are 20 frames apart between first and second tap, 20 frames apart between second and third tap, and 10 frames apart between third and fourth tap."),(0,i.kt)("p",null,'There is also an "average starting momentum" number printed out which gives some feedback on how effective the start of the short charge was.\nEven a single stutter will lower this number from above 2 to below 2, but you can reduce the number further with more stutters.\nIt also accounts for the amount of the time the dpad was released, since each frame the dpad is released while decelerating, Samus moves an extra pixel forward, so shorter releases of the dpad are more optimal.'),(0,i.kt)("h2",null,"I Frames"),(0,i.kt)("p",null,"Counts down the invulnerability frames after Samus takes damage."),(0,i.kt)("h2",null,"Spikesuit"),(0,i.kt)("p",null,"Displays feedback on the two inputs required to generate a spikesuit. It assumes you will be taking damage from spikes which give 60 I-frames and 10 frames of knockback. The feedback is as follows:",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","First two characters = Feedback on the unmorph:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E1 indicates you unmorphed the same frame you took damage, which is one frame early."),(0,i.kt)("li",{parentName:"ul"},"E indicates you unmorphed two or more frames early."),(0,i.kt)("li",{parentName:"ul"},"Y1 indicates you unmorphed on the first frame of the two-frame window, and Y2 indicates you unmorphed on the second frame."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you unmorphed late where the number tells you how many frames you were late.")),(0,i.kt)("p",null,"Last two characters = Feedback on the shinespark activation:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you activated the spark early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YY indicates you activated the spark on the correct frame."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you activated the spark late where the number tells you how many frames you were late.")),(0,i.kt)("p",null,"If you get the feedback Y1E1, then this means you unmorphed after taking damage and activated the shinespark all before you ran out of knockback frames. This is known as the bad frame since Samus will do the shinespark but not give you a spikesuit. It is a double-frame-perfect mistake."),(0,i.kt)("h2",null,"Lag Counter"),(0,i.kt)("p",null,"Counts up lag frames in real time. Resets after each door transition."),(0,i.kt)("h2",null,"CPU Usage"),(0,i.kt)("p",null,"Counts down the number of scanlines that were drawn during processing of the next frame. The screen has a resolution of 256x224, so at 60 fps, 224 scanlines must be drawn every 1/60th of a second. This count is converted to a percentage to get a sense of the lag. The higher the percentage, the closer we were to not finishing processing in time. If processing does not finish in time, then the game must draw the current frame again and this is a lag frame. If the percentage is a low number, then it is likely the game lagged with most of the work done during the previous frame and a small amount of work left over for the next frame."),(0,i.kt)("h2",null,"X Position"),(0,i.kt)("p",null,"Displays the X position in pixels. Also Samus HP is replaced by the subpixels in hexadecimal."),(0,i.kt)("h2",null,"Y Position"),(0,i.kt)("p",null,"Displays the Y position in pixels. Also Samus HP is replaced by the subpixels in hexadecimal."),(0,i.kt)("h2",null,"Horiz Speed"),(0,i.kt)("p",null,"Displays the horizontal speed combined with momentum in pixels. Also Samus HP is replaced by the subpixels in hexadecimal."),(0,i.kt)("h2",null,"Vert Speed"),(0,i.kt)("p",null,"Displays the vertical speed in pixels. Initial jump speed will displayed as a three digit hex value, overwriting the item collection percentage. Samus HP will be overwritten with space jump feedback:\n","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","First two characters = Number of frames that the jump button was held.\n","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","Last two characters = Feedback on the time when you jumped, with respect to space jump."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you were early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"Y# indicates you made a valid space jump. On NTSC, you normally have 23 frames, but if underwater you have 41 frames. On PAL, you normally have 19 frames, but if underwater you have 28 frames."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you were late where the number tells you how many frames you were late.")),(0,i.kt)("h2",null,"Quick Drop"),(0,i.kt)("p",null,"Displays the number of frames between pressing a left or right input and another left or right input, if the number of frames is between 1 and 20. If a down input is pressed, then feedback on mid-air morph bomb spread will be given:\n","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","First two characters = Feedback on mid-air morph while beam is charged:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you were early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YY indicates you attempted to morph on the correct frame."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you were late where the number tells you how many frames you were late.")),(0,i.kt)("h2",null,"Wall Jump"),(0,i.kt)("p",null,"Displays the number of frames between pressing a left or right input and pressing the jump button, if the number of frames is between 1 and 20.\nTo walljump this number should be between 2 and 9 inclusive, although on PAL 8 does not work due to Samus' animation running out and being in the incorrect pose on that particular frame.\nAlso, if the number of frames is 7-9 (a delayed walljump) and the walljump is taking place in WRITG or Bubble Mountain, then additional information may be presented if you appear to be making hi-jump-less walljump attempts (also known as the hypo jump):\n","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","First two characters = Feedback on the delayed walljump:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"H# indicates you jumped high where the number tells you how many pixels you were high (can be zero in Bubble Mountain; H0 does not work and will bonk)."),(0,i.kt)("li",{parentName:"ul"},"B# indicates you jumped high and will bonk, but could save it with a quick mid-air wiggle (turn and turn back). This wiggle shrinks Samus' hitbox.\nIt only works in WRITG and not Bubble Mountain. The number is the most amount of frames you can take to wiggle, with larger numbers indicating your jump was closer to the optimal YH position."),(0,i.kt)("li",{parentName:"ul"},"YH indicates you jumped at the optimum height with an 8 or 9 frame walljump."),(0,i.kt)("li",{parentName:"ul"},"YY indicates you jumped just below the optimum height with a 9 frame walljump (PAL only since PAL physics allow for a larger range of heights to work, although it must be a max-delayed 9 frame walljump since 8 frames won't work)."),(0,i.kt)("li",{parentName:"ul"},"YL indicates you jumped below optimum height with an 8 or 9 frame walljump. Generally a YL height is still enough height to get the second walljump without too much trouble."),(0,i.kt)("li",{parentName:"ul"},"L0 indicates you jumped below optimum height with a 7-9 frame walljump. L0 jumps still work but the second walljump can be very tight. L0 jumps are the only ones that work with a 7-frame delayed walljump, so for a more optimal setup you want an 8 or 9 frame walljump."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you jumped low where the number tells you how many pixels you were low.")),(0,i.kt)("p",null,"Additionally Samus HP will be overwritten with the average climb speed in approximate pixels per frame (inflated by 2.4%). It averages vertical speed between jump presses, assuming the presses are within 2 seconds of each other and assuming the total speed does not overflow (if either of these happen then average will be blank). If total speed drops below zero then the average will be recorded as zero.\nAlso the segment timer is overwritten by a set of four numbers representing the number of frames jump was released the last four times that the jump button was released. Since Samus' upward momentum usually stops immediately upon releasing jump, reducing the number of frames where jump is released is the simplest way to improve climb speed."),(0,i.kt)("p",null,"Finally if the walljump is taking place near a specific namihe in Lava Dive, then feedback will be given on the height of the walljump for the purposes of a zero-tank lava dive where the first walljump is made off of the namihe:\n","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","First two characters = Feedback on the walljump:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"H# indicates you jumped high where the number tells you how many pixels you were high. Note that some values still work (especially with delayed namihe jumps); you may find an H1 setup that works just as well as a Y# setup. With the H# setups, it is possible for the second walljump to be so high that it will always bonk."),(0,i.kt)("li",{parentName:"ul"},"Y# indicates you jumped at one of the four pixels that can work with a quick or delayed walljump off of the namihe and do not risk going too high to always bonk on the second walljump. Y1 may barely reach the second walljump, but as a result of being so low on the wall, it may allow a two-frame window for the second walljump (if the second walljump is higher then it must be a maximum-delayed walljump)."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you jumped low where the number tells you how many pixels you were low. These values will never work as you cannot reach the second walljump.")),(0,i.kt)("p",null,"Note that the namihe does not pull Samus in like a wall does (subpixels are not reset), so while a delayed walljump is preferred (it matters if you jump from a higher position), walljumps off of the namihe do not provide the traditional 2-9 frame window for walljumps."),(0,i.kt)("h2",null,"Arm Pump"),(0,i.kt)("p",null,"Displays the number of armpumps (pose changes) per second, and the number of wasted angle down and/or angle up inputs per second.\nAn input is considered wasted if it does not change the pose, or if both angle down and angle up are changed on the same frame.\nWhen exiting the room, the totals for the room are displayed.\nNote that the specific pose is not actually checked, so other actions performed by Samus may be counted."),(0,i.kt)("h2",null,"Shot Timer"),(0,i.kt)("p",null,"Displays the number of frames between pressing the shoot button."),(0,i.kt)("h2",null,"RAM Watch"),(0,i.kt)("p",null,"Displays the value of two configurable memory addresses in bank $7E, $7F, or the first bank of SRAM. Values can also be \"locked\" or rewritten each frame while the RAM Watch HUD mode is enabled. These addresses and values can be configured in the 'Customize RAM Watch' submenu."),(0,i.kt)("h1",null,"Room strat features"),(0,i.kt)("h2",null,"Parlor-Climb Door Skip"),(0,i.kt)("p",null,"Provides feedback on attempts to get out of bounds while falling through the door from parlor to climb:",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","First Y = You started from the correct position and you are holding jump (ready to do a buffered jump upon turning around). Currently only the non-moonfall starting position is accepted.\n","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","First two characters = Feedback on timing the first jump after pausing (this will overwrite the first Y):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you jumped early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YY indicates you jumped on the correct frame."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you jumped late where the number tells you how many frames you were late.")),(0,i.kt)("p",null,"Last two characters = Feedback on breaking out of the aim down pose:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you broke pose early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YY indicates you broke pose on time."),(0,i.kt)("li",{parentName:"ul"},"L1 indicates you broke pose one frame late. You will get this feedback just as you hit the door transition."),(0,i.kt)("li",{parentName:"ul"},"LX indicates you broke pose more than one frame late. You will not get this feedback until after the door transition.")),(0,i.kt)("h2",null,"Taco Tank"),(0,i.kt)("p",null,"Provides feedback on attempts to collect the Retro Brinstar E-Tank using a precise walljump:",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","First Y = You started from the correct position (pressed against the wall facing left).",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","First character = Number of frames that you initially held left (this will replace the first Y). In order to get the proper momentum to walljump and collect the tank, this will need to be either 3 or 4.",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","Second character = Number of frames after pressing left that jump was pressed. In order to get the proper momentum to walljump and collect the tank, this will need to be 3. It is normal for a 0 to appear when jumping straight up and down and shooting at the tank to reveal it.",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","Next two characters = Feedback on the walljump height:  "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"L# indicates you were low where the number tells you how many frames you were low."),(0,i.kt)("li",{parentName:"ul"},"Y# (Y1-Y3) indicates you were at a good height, with # indicating the number of frames where you can grab the tank (based solely on walljump height)."),(0,i.kt)("li",{parentName:"ul"},"B# (B1-B3) indicates you will bonk the ceiling but can still collect the tank, with # indicating the number of frames where you can grab the tank (based solely on walljump height)."),(0,i.kt)("li",{parentName:"ul"},"H# indicates you were high where the number tells you how many frames you were high.")),(0,i.kt)("p",null,"Additionally Samus HP will be overwritten with more feedback:",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","First character = Number of pixels away from the wall when the walljump occurred. Ideally this will be 7. If it is more than 7 then you will not execute a walljump. If is it less than 7, then you are practically guaranteed to have fewer frames to collect the tank. For example, if you see Y2 6, then it is likely you will only have 1 frame to grab the tank instead of 2.",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","Second character = Number of frames where you can collect the tank. This will take into account your walljump height, initial pixels away from the wall, and time when you break spin. For example, if you see Y2 71, then you broke spin too early and missed out on a frame to grab the tank. If you see an X, this means there was something wrong with the walljump right out of the gate, either because it was too high or low, or because it did not have the correct horizontal momentum. Even with a Y3 or B3 jump, it is not possible to reach the tank without the correct momentum.",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","Last two characters = Feedback on the time when you expanded your hitbox to grab the tank:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you were early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"Y# indicates you had one chance to collect the tank."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you were late where the number tells you how many frames you were late.")),(0,i.kt)("p",null,"Unfortunately even if you are coming in with a Y3 73 jump, you only get one chance to grab the tank. It does not matter if you choose Y1, Y2, or Y3 to attempt the grab, as it will come down to the collision oscillator. When Samus expands her hitbox, she will contact both the tank and the ceiling, but the game will only check one of the tiles. If it checks the ceiling tile, it will push Samus down and out of the ceiling and she will not be able to grab the tank on the next frame."),(0,i.kt)("h2",null,"Moondance (currently only supported on NTSC)"),(0,i.kt)("p",null,"Provides feedback on moondance (Dachora room) or tasdance (Green Brinstar Main Shaft room):  "),(0,i.kt)("p",null,"For moondance, first character = Y when appropriate moondance position reached, followed by the number of successfully executed moonfalls.  "),(0,i.kt)("p",null,"Last four characters = Extra frames spent on each step of the moonfall, or an error code if a mistake was made. Note that some mistakes can be recovered where the moonfall actually succeeds, but in these cases the moonfall still won't be counted by the trainer."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1st number = Extra frames spent prior to pressing shot, including extra frames before executing a normal turnaround."),(0,i.kt)("li",{parentName:"ul"},"2nd number = Extra frames spent prior to turning."),(0,i.kt)("li",{parentName:"ul"},"3rd number = Extra frames spent prior to releasing shot."),(0,i.kt)("li",{parentName:"ul"},"4th number = Extra frames spent prior to releasing direction (beyond what is required to make the moonfall work)."),(0,i.kt)("li",{parentName:"ul"},"F ER / F EL = Failed turned right early or turned left early (before pressing shot).  Not flagged when turning left before 29 moonfalls executed as those right-to-left moonfalls would break the moondance setup due to insufficient fall speed."),(0,i.kt)("li",{parentName:"ul"},"F LR / F LL = Failed turned right late or turned left late (released shot first)."),(0,i.kt)("li",{parentName:"ul"},"F EN = Failed early neutral (released left/right too soon or before the moonfall completed).  ")),(0,i.kt)("p",null,"Note it is not possible to achieve all zeros just due to the way the trainer is implemented, and probably not a good idea to try anyway as going a frame early could either break the moondance immediately or disrupt your rhythm and lead to a failure.\nAlso note that the amount of frames direction needs to be held varies due to Samus gaining downward speed over time.\nThe first moonfall requires 21 frames, second moonfall 13 frames, third and fourth 11 frames, 5-9 ten frames, 10-29 nine frames, 30-176 eight frames."),(0,i.kt)("p",null,"For tasdance, first character = Y when standing on the elevator facing left (becomes an X if you fall off the elevator without sufficient fall speed), followed by number of right turns (not counting the initial moonfall). This number must be between 35 and 40 when moving right off of the elevator."),(0,i.kt)("p",null,"Last four characters = The time between presses and releases during the turns (each turn takes seven frames so these numbers should average out to seven), and also feedback on the final two frame-perfect inputs (turning left and releasing down) which are always eleven frames apart."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1st number = Frames between pressing right and pressing left"),(0,i.kt)("li",{parentName:"ul"},"2nd number = Frames between releasing right and releasing left"),(0,i.kt)("li",{parentName:"ul"},"3rd number = Frames between pressing left and pressing right"),(0,i.kt)("li",{parentName:"ul"},"4th number = Frames between releasing left and releasing right"),(0,i.kt)("li",{parentName:"ul"},"E# indicates you were early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YY indicates you hit one of the frame perfect inputs."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you were late where the number tells you how many frames you were late.")),(0,i.kt)("h2",null,"Gate Glitch"),(0,i.kt)("p",null,"Provides feedback on attempts to open a left-facing gate from the right side:",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","First character = Number of frames where you could have fired a missile through the gate (0-2).",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","Last two characters = Feedback on the timing of your shot (only visible if number of frames greater than 0):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you were early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YY indicates you were on time with a one-frame window."),(0,i.kt)("li",{parentName:"ul"},"Y1 indicates you shot on the first frame of a two-frame window, and Y2 indicates you shot on the second frame."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you were late where the number tells you how many frames you were late.")),(0,i.kt)("p",null,"Note: This only gives feedback on whether the missile could have been fired through the gate. It does not predict if the missile would hit the blue or green switch that activates the gate."),(0,i.kt)("h2",null,"Moat CWJ (currently only supported on NTSC)"),(0,i.kt)("p",null,"Provides feedback on attempts to cross the moat using a Continuous Wall Jump:",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","First Y = You started from the correct position. Acceptable starting positions are in the previous room pressed against the door, or are as far left as possible in the moat room with the door open. Other positions may work for moat CWJ, but these are the two normalized positions providing a good chance of success. If you try other starting positions, the trick may become more difficult (double-frame-perfect) or even impossible.",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","First two characters = Feedback on the first jump (this will overwrite the first Y):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you jumped early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YY indicates you jumped on the correct frame, which is the last frame before you fall into the water."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you jumped late where the number tells you how many frames you were late.")),(0,i.kt)("p",null,"Last two characters = Feedback on the second jump:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Blank indicates the game did not register your second jump. This can happen if you are collecting the missile pack and then press jump too soon as the fanfare box is closing."),(0,i.kt)("li",{parentName:"ul"},"E# indicates you jumped early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"Y1 indicates you jumped on the first frame of the two-frame window, and Y2 indicates you jumped on the second frame."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you jumped late where the number tells you how many frames you were late.")),(0,i.kt)("p",null,"Note: If you started from inside the moat room (as far left as possible in the room), it is possible to observe YYY2 and miss the jump. Since Samus has a subpixel position, even when Samus appears to be as far left as possible, she may need to be even further left in subpixels in order to get a two-frame window on the second jump. A majority of subpixels work. Also if you start from outside the moat room then it is always a two-frame window regardless of subpixels."),(0,i.kt)("h2",null,"Robot Flush"),(0,i.kt)("p",null,"Provides feedback on attempts to flush the two robots in the Bowling Alley:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First 1 = The first robot was hit by a beam shot."),(0,i.kt)("li",{parentName:"ul"},"Second 1 = The first robot fell down."),(0,i.kt)("li",{parentName:"ul"},"First 2 = The second robot was hit by a beam shot."),(0,i.kt)("li",{parentName:"ul"},"Second 2 = The second robot fell down.")),(0,i.kt)("p",null,"Thus 1122 indicates both robots were successfully flushed.\n","\xa0",'\nSpecifically, the first number for each robot is tied to a an AI Variable that seems to be something like the "aggro level". It goes up when you shoot the robot, and decays downwards over time. If the robot is hit but fails to fall in, the value will eventually decay low enough that the first number will disappear. Then the second number is just tied to the Y position, to tell if it\'s in the pit.'),(0,i.kt)("h2",null,"Shine to PB"),(0,i.kt)("p",null,"Similar to shinespark, except Samus HP is overwritten to display information for the power bomb. Counts down the frames from the time you charge a shinespark until the time the charge runs out. If you activate the shinespark in time, it will display the number of frames to spare. If you lay a power bomb, it will display the number of frames to spare."),(0,i.kt)("h2",null,"Elevator Crystal Flash"),(0,i.kt)("p",null,"Provides feedback on attempts to crystal flash while initiating a downward elevator on the same frame, which grants Samus a spikesuit:",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","First character = Feedback on the power bomb:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Y indicates you were at the correct height."),(0,i.kt)("li",{parentName:"ul"},"X indicates you were not at the correct height."),(0,i.kt)("li",{parentName:"ul"},"% indicates you were at the horizontal center of the elevator (regardless of whether or not you were at the correct height). Laying the power bomb at the center is risky since, if you mistime the down input, it is possible for the crystal flash to activate after Samus has started travelling down the elevator, which is likely a run-ending mistake.")),(0,i.kt)("p",null,"Second Y = You returned to the same X and Y location (within 3 seconds or so) and you had 0 vertical speed. You should also have 0 horizontal speed although this is not checked."),(0,i.kt)("p",null,"Last two characters = Feedback on your timing in pressing down at the correct position:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you were early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YY indicates you were on time. If you did not get the spikesuit, it could mean you were not holding the correct inputs (you must hold only L, R, and shoot, in addition to pressing down on the correct frame), or it could mean you did not meet the conditions for a crystal flash. You must have 10+ missiles, 10+ super missiles, 10+ power bombs, and be below 50 HP with empty reserves (having non-empty reserves to manual will prevent a crystal flash). It is often stated that you need 11+ power bombs, but that is counting the power bomb you laid at the beginning of the crystal flash clip attempt."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you were late where the number tells you how many frames you were late.")),(0,i.kt)("p",null,"Note: This will also give feedback on the power bomb height in the Dachora room, in order to convert a spikesuit into a blue suit by interrupting the shinespark animation with a crystal flash."),(0,i.kt)("h2",null,"Botwoon Crystal Flash"),(0,i.kt)("p",null,"Provides feedback on attempts to crystal flash clip in Botwoon Hallway (also works for East Pants Room):\n","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","First Y = You laid a power bomb at the correct height (maximum height that you can).\n","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","Second Y = You returned to the same X and Y location (within 3 seconds or so) and you had 0 vertical speed. You should also have 0 horizontal speed although this is not checked."),(0,i.kt)("p",null,"Last two characters = Feedback on your timing in returning to the correct position:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you were early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YY indicates you were on time. If you did not get the crystal flash, it could mean you were not holding the correct inputs (you must hold only L, R, down, and shoot), or it could mean you did not meet the conditions for a crystal flash. You must have 10+ missiles, 10+ super missiles, 10+ power bombs, and be below 50 HP with empty reserves (having non-empty reserves to manual will prevent a crystal flash). It is often stated that you need 11+ power bombs, but that is counting the power bomb you laid at the beginning of the crystal flash clip attempt."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you were late where the number tells you how many frames you were late.")),(0,i.kt)("p",null,"Note: If using the bombs method, there is a two-frame window where Samus will reach the correct position with 0 speed for two frames. In this case, you will get your best case feedback. For example, instead of seeing YYL2 followed by YYL3, you will just see YYL2."),(0,i.kt)("h2",null,"Draygon AI"),(0,i.kt)("p",null,"Prints the name of Draygon's current AI routine on the bottom-right of the HUD. Draygon's HP is displayed on the left."),(0,i.kt)("h2",null,"Aqueduct Snail Clip"),(0,i.kt)("p",null,"Provides feedback on attempts to stop a particular snail in a position where you can jump up and clip through pipes to reach the two Aqueduct items:",(0,i.kt)("br",{parentName:"p"}),"\n","",(0,i.kt)("br",{parentName:"p"}),"\n","Last two characters = Feedback on your timing in returning to the correct position:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"H# indicates the snail is too high where the number tells you how many pixels it is high."),(0,i.kt)("li",{parentName:"ul"},"YH indicates the snail is in the highest of the 3-5 pixels where the clip works."),(0,i.kt)("li",{parentName:"ul"},"Y  indicates the snail is in the middle of the 3-5 pixels where the clip works."),(0,i.kt)("li",{parentName:"ul"},"YL indicates the snail is in the lowest of the 3-5 pixels, where the clip only works because you have Hi-Jump Boots equipped."),(0,i.kt)("li",{parentName:"ul"},"L0 indicates the snail is in the lowest of the 3-5 pixels, where the clip does not work because you do not have Hi-Jump Boots equipped."),(0,i.kt)("li",{parentName:"ul"},"L# indicates the snail is too low where the number tells you how many pixels it is low.")),(0,i.kt)("p",null,"Note: Snail clip works with three pixels on NTSC and five pixels on PAL. However because the snail moves 1.25 pixels per frame on NTSC and roughly 1.5 pixels per frame on PAL, it works out to only 3 frames on NTSC and 3 or 4 frames on PAL.  Without Hi-Jump Boots equipped, it's only a 2-frame window on both NTSC and PAL."),(0,i.kt)("h2",null,"Wasteland (currently only supported on NTSC)"),(0,i.kt)("p",null,"Provides feedback on the timing of bombs during wasteland entry from kihunter shaft. This assumes a normalized entry (roll off ledge in prior room, press against left side of door, continue holding left). If you do this, then you should see a pair of Y's after entry (although it may be possible to fool this check to give Y's even if the setup is off, for example not pressing against the left side of the door).  "),(0,i.kt)("p",null,"The first block of four characters (two characters for each bomb) is for a simple roll into the room, requiring a high hop from the third hopper (second one on the ground):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you bombed early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"Y# indicates you bombed on time where the number tells you which of the seven frames it was."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you bombed late where the number tells you how many frames you were late.  ")),(0,i.kt)("p",null,"The second block of four characters (two characters for each bomb) is for standing up and running under the first hopper, requiring a high hop from the first hopper:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you bombed early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"B1 indicates you got the bomb boost, which slightly affects the timing of the second bomb but still has a five frame window."),(0,i.kt)("li",{parentName:"ul"},"Y# indicates you bombed on time where the number tells you which of the nine frames (first bomb) or five frames (second bomb) it was."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you bombed late where the number tells you how many frames you were late.  ")),(0,i.kt)("p",null,"Note: The trainer doesn't verify that the bombs break open the tunnel. For example, Y7Y1 will fail because the first bomb was laid late, leaving little time for the second bomb, whereas Y7Y7 can work. The sooner the first bomb is laid, the more time is available for the second bomb."),(0,i.kt)("h2",null,"Ridley AI"),(0,i.kt)("p",null,"Prints the name of Ridley's current AI routine on the bottom-right of the HUD to assist with finding manipulation strategies. Ridley's HP is displayed on the left until it reaches zero, at which point it will start counting Ridley's \"death grab\" attempts until Ridley explodes."),(0,i.kt)("h2",null,"Downback Zeb Skip"),(0,i.kt)("p",null,"Provides feedback on downback zeb skip attempts:\n","\xa0","  "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First character = Feedback on your horizontal subpixel normalization. An X indicates your horizontal subpixel was correctly normalized, while an N indicates it was not. (This may not necessarily support all normalized setups; if it incorrectly reports an N for your favorite setup, let us know!)."),(0,i.kt)("li",{parentName:"ul"},"Second character = Feedback on your vertical subpixel normalization. A Y indicates your vertical subpixel was correctly normalized; an N indicates it was not. (If you're getting an N here, the most likely cause is that you're holding forward during knockback from the Rinka and getting a downwards damage boost, which you do not want.)"),(0,i.kt)("li",{parentName:"ul"},'Third character = number of frames between knockback ending and the start of your downback. Values of 1-4, 6-10, or 13-14 are "good frames" that result in a successful clip, while 0, 5, 11-12, and 15+ are "bad frames" that will result in a failed attempt.')),(0,i.kt)("h2",null,"Mother Brain HP"),(0,i.kt)("p",null,"Displays the HP of the second enemy. Most useful for the Mother Brain fight since Mother Brain uses the second enemy slot."),(0,i.kt)("h2",null,"Two Cries (currently only supported on NTSC)"),(0,i.kt)("p",null,"Provides feedback on attempts to manipulate Mother Brain into a fast sitdown animation (baby detaches after just two cries) while performing the standup glitch.\nThis assumes you are using the method starting from angle-crouch jump, aim down while below Mother Brain's head (stay in this pose the entire time you are at or above head level), morph into an automatic springball jump, and unmorph while falling.\nYou can also do this strat without springball by using a buffered auto-jump into a quick morph, but the trick is more difficult as there are fewer frames that work.\n","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","First Y = The room strat recognizes Mother Brain is in rainbow beam phase near the time where you can perform the Two Cries manip.\n","\xa0",(0,i.kt)("br",{parentName:"p"}),"\n","First two characters = Feedback on the first jump (this will overwrite the first Y):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you jumped early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YE indicates you jumped one frame early. The manip is still possible but more difficult."),(0,i.kt)("li",{parentName:"ul"},"X# indicates you jumped on one of the six good frames but without springball, so the manip will not work."),(0,i.kt)("li",{parentName:"ul"},"Y# indicates you jumped on one of the six good frames (although Y2 is not ideal with springball)."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you jumped late where the number tells you how many frames you were late.")),(0,i.kt)("p",null,"Last two characters = Feedback on the unmorph (only given if first jump was YE or Y#):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"E# indicates you unmorphed early where the number tells you how many frames you were early."),(0,i.kt)("li",{parentName:"ul"},"YE indicates you unmorphed one or two frames early, but because the first jump happened on a specific frame, the manip should work."),(0,i.kt)("li",{parentName:"ul"},"X# indicates you unmorphed on one of the six good frames, but because your first jump happened on YE or Y2 or because you don't have springball, the manip will not work."),(0,i.kt)("li",{parentName:"ul"},"Y# indicates you unmorphed on one of the six good frames and were not scammed by YE or Y2 or lack of springball."),(0,i.kt)("li",{parentName:"ul"},"YL indicates you unmorphed one frame late, but because the first jump happened on a specific frame, the manip should work."),(0,i.kt)("li",{parentName:"ul"},"L# indicates you unmorphed late where the number tells you how many frames you were late.",(0,i.kt)("br",null))))}function h(){return(0,o.jsx)(n.Z,{children:(0,o.jsx)(r.Z,{MarkdownComponent:u})})}u.isMDXComponent=!0}},function(e){e.O(0,[497,774,888,179],(function(){return t=4215,e(e.s=t);var t}));var t=e.O();_N_E=t}]);